{"programModules":{"EXT130MI":{"program":"EXT130MI","triggers":{},"transactions":{"RclBalance":{"sourceUuid":"6ffaeba9-bc12-4a0f-bc51-924d02e4c7be","name":"RclBalance","program":"EXT130MI","description":"Reclass Balance","active":true,"multi":false,"modified":1697877410064,"modifiedBy":"900107","outputFields":[{"name":"CONO","description":"Company","length":3,"mandatory":false,"type":"N"},{"name":"MSNR","description":"Message number","length":15,"mandatory":false,"type":"A"},{"name":"MSLN","description":"Message line number","length":5,"mandatory":false,"type":"N"},{"name":"MSGS","description":"Sequence number","length":3,"mandatory":false,"type":"N"}],"inputFields":[{"name":"CONO","description":"Company","length":3,"mandatory":false,"type":"N"},{"name":"E0PA","description":"Partner","length":17,"mandatory":true,"type":"A"},{"name":"E065","description":"Message Type","length":6,"mandatory":true,"type":"A"},{"name":"WHLO","description":"Warehouse","length":3,"mandatory":true,"type":"A"},{"name":"WHSL","description":"Location","length":10,"mandatory":true,"type":"A"},{"name":"ITNO","description":"Item number","length":15,"mandatory":true,"type":"A"},{"name":"BANO","description":"Lot number","length":20,"mandatory":true,"type":"A"},{"name":"CAMU","description":"Container","length":20,"mandatory":true,"type":"A"},{"name":"NBAN","description":"New Lot number","length":20,"mandatory":false,"type":"A"},{"name":"RSCD","description":"Reason code","length":3,"mandatory":false,"type":"A"},{"name":"STAS","description":"New Lot status","length":1,"mandatory":true,"type":"A"}],"utilities":["DateUtil"],"market":"ALL"}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"6ffaeba9-bc12-4a0f-bc51-924d02e4c7be":{"uuid":"6ffaeba9-bc12-4a0f-bc51-924d02e4c7be","updated":1697563115707,"updatedBy":"900107","created":1697877400354,"createdBy":"900107","apiVersion":"UNKNOWN","beVersion":"16.0.0.20230822184312.7","language":"GROOVY","codeHash":"261DCEA33A61C4450B2781446B10A3ACBACFA35FE52B4D70C58A4157C6D5BD84","code":""}}}