{"programModules":{"EXT130MI":{"program":"EXT130MI","triggers":{},"transactions":{"VfyFreqItSu":{"sourceUuid":"bf92f835-d7f6-4c9e-b8a1-9ac5a2418bde","name":"VfyFreqItSu","program":"EXT130MI","description":"QMS Multi Test and Test Frequency","active":true,"multi":false,"modified":1677049281525,"modifiedBy":"900073","outputFields":[{"name":"CONF","description":"New Record","length":1,"mandatory":false,"type":"A"},{"name":"TRMN","description":"Tests Remaining","length":3,"mandatory":false,"type":"N"},{"name":"NBTR","description":"Number of Base Tests Required","length":2,"mandatory":false,"type":"N"},{"name":"QAPR","description":"QI Status","length":1,"mandatory":false,"type":"A"},{"name":"PUNO","description":"PO number","length":10,"mandatory":false,"type":"A"},{"name":"QRID","description":"QI Request ID","length":8,"mandatory":false,"type":"A"},{"name":"SPEC","description":"Specification","length":20,"mandatory":false,"type":"A"},{"name":"NBTO","description":"Number of Base Tests Required - Original","length":2,"mandatory":false,"type":"N"},{"name":"QTST","description":"Test Code","length":10,"mandatory":false,"type":"A"},{"name":"TSTT","description":"Test Status - First","length":1,"mandatory":false,"type":"N"},{"name":"LTST","description":"Test Status - Last","length":1,"mandatory":false,"type":"N"},{"name":"QTRS","description":"Test Result Quant - First","length":17,"mandatory":false,"type":"N"},{"name":"LQTR","description":"Test Result Quant - Last","length":17,"mandatory":false,"type":"N"},{"name":"QLC2","description":"Test Result Qual - First","length":10,"mandatory":false,"type":"A"},{"name":"LQLC","description":"Test Result Qual - First","length":10,"mandatory":false,"type":"A"},{"name":"CHID","description":"Changed by - first","length":10,"mandatory":false,"type":"A"},{"name":"LCHI","description":"Changed by - last","length":10,"mandatory":false,"type":"A"}],"inputFields":[{"name":"CONO","description":"Company","length":3,"mandatory":true,"type":"N"},{"name":"SUNO","description":"Supplier","length":10,"mandatory":true,"type":"A"},{"name":"ITNO","description":"Item Number","length":15,"mandatory":true,"type":"A"},{"name":"QTST","description":"Test Code","length":10,"mandatory":false,"type":"A"},{"name":"BANO","description":"Lot Number","length":20,"mandatory":false,"type":"A"},{"name":"TTPE","description":"Type(V=Verify, X=Execute, H=History)","length":1,"mandatory":false,"type":"A"},{"name":"SCST","description":"Successful Test (Y/N)","length":1,"mandatory":false,"type":"A"},{"name":"QAPR","description":"QI Status","length":1,"mandatory":false,"type":"A"},{"name":"PUNO","description":"PO Number","length":10,"mandatory":false,"type":"A"},{"name":"SPEC","description":"Specification","length":20,"mandatory":false,"type":"A"}],"utilities":[],"market":"ALL"}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"bf92f835-d7f6-4c9e-b8a1-9ac5a2418bde":{"uuid":"bf92f835-d7f6-4c9e-b8a1-9ac5a2418bde","updated":1677035330030,"updatedBy":"900107","created":1677049268522,"createdBy":"900073","apiVersion":"UNKNOWN","beVersion":"16.0.0.20221210044646.7","language":"GROOVY","codeHash":"8797555A1BE594113252ADA211B4CD5B55226AF9A3B07C2D6E7D1DCED527106D","code":""}}}