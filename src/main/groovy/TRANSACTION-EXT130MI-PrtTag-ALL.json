{"programModules":{"EXT130MI":{"program":"EXT130MI","triggers":{},"transactions":{"PrtTag":{"sourceUuid":"219e0208-e5a3-4f7e-9c21-90d8421f9d68","name":"PrtTag","program":"EXT130MI","description":"Print Tag(s)","active":true,"multi":false,"modified":1711053503916,"modifiedBy":"020964","outputFields":[],"inputFields":[{"name":"WHLO","description":"Warehouse","length":3,"mandatory":true,"type":"A"},{"name":"ITNO","description":"Item number","length":15,"mandatory":true,"type":"A"},{"name":"SBAN","description":"Sub-Lot Number","length":20,"mandatory":true,"type":"A"},{"name":"CAMU","description":"Container number","length":20,"mandatory":true,"type":"A"},{"name":"WHSL","description":"Location","length":10,"mandatory":true,"type":"A"},{"name":"TAGN","description":"Tag Number","length":3,"mandatory":false,"type":"N"},{"name":"TAGI","description":"Tag manual ID","length":20,"mandatory":false,"type":"A"},{"name":"TAGT","description":"Tag Type","length":4,"mandatory":false,"type":"A"},{"name":"NOTG","description":"Number of Tags","length":3,"mandatory":false,"type":"N"},{"name":"DEV0","description":"Output Device","length":10,"mandatory":false,"type":"A"},{"name":"BASE","description":"Lot Type(Y=BASE)","length":1,"mandatory":false,"type":"A"},{"name":"RORC","description":"Reference Order Category","length":1,"mandatory":false,"type":"N"},{"name":"RORN","description":"Reference Order","length":10,"mandatory":false,"type":"A"},{"name":"RORL","description":"Reference Order Line","length":5,"mandatory":false,"type":"N"}],"utilities":[],"market":"ALL"}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"219e0208-e5a3-4f7e-9c21-90d8421f9d68":{"uuid":"219e0208-e5a3-4f7e-9c21-90d8421f9d68","updated":1709754961007,"updatedBy":"900107","created":1711053495045,"createdBy":"020964","apiVersion":"UNKNOWN","beVersion":"16.0.0.20240116163623.6","language":"GROOVY","codeHash":"A20BC97742DD02496CFF718FEFA952D63DEE0C2CEEF413617571F35803E347EF","code":""}}}