{"programModules":{"EXT130MI":{"program":"EXT130MI","triggers":{},"transactions":{"SplBalance":{"sourceUuid":"81b5443c-df2a-4917-b104-72337b5195d5","name":"SplBalance","program":"EXT130MI","description":"Split Balance for existing Partial Move on Sub-Lot","active":true,"multi":false,"modified":1697885999774,"modifiedBy":"900107","outputFields":[{"name":"CONO","description":"Company","length":3,"mandatory":false,"type":"N"},{"name":"WHLO","description":"Warehouse","length":3,"mandatory":false,"type":"A"},{"name":"ITNO","description":"Item Number","length":15,"mandatory":false,"type":"A"},{"name":"SBAN","description":"Sub Lot Number","length":20,"mandatory":false,"type":"A"},{"name":"CAMU","description":"Container","length":20,"mandatory":false,"type":"A"},{"name":"WHSL","description":"Location","length":10,"mandatory":false,"type":"A"}],"inputFields":[{"name":"CONO","description":"Company","length":3,"mandatory":false,"type":"N"},{"name":"WHLO","description":"Warehouse","length":3,"mandatory":true,"type":"A"},{"name":"ITNO","description":"Item Number","length":15,"mandatory":true,"type":"A"},{"name":"SBAN","description":"Sub Lot Number","length":20,"mandatory":true,"type":"A"},{"name":"CAMU","description":"Container","length":20,"mandatory":true,"type":"A"},{"name":"WHSL","description":"Location","length":10,"mandatory":true,"type":"A"},{"name":"TTYP","description":"Transaction Type","length":2,"mandatory":false,"type":"N"},{"name":"LMTS","description":"Timestamp","length":18,"mandatory":false,"type":"A"},{"name":"RGDT","description":"entry date","length":8,"mandatory":true,"type":"A"},{"name":"RGTM","description":"entry time","length":6,"mandatory":true,"type":"A"},{"name":"TMSX","description":"time suffix","length":3,"mandatory":true,"type":"A"}],"utilities":["DateUtil"],"market":"ALL"}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"81b5443c-df2a-4917-b104-72337b5195d5":{"uuid":"81b5443c-df2a-4917-b104-72337b5195d5","updated":1697563234853,"updatedBy":"900107","created":1697877400354,"createdBy":"900107","apiVersion":"UNKNOWN","beVersion":"16.0.0.20230822184312.7","language":"GROOVY","codeHash":"CF1546F4630443387F4F3400A1DB09A6951872E95961136A01C284EBF45F79EC","code":""}}}