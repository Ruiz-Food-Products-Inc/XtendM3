{"programModules":{"EXT130MI":{"program":"EXT130MI","triggers":{},"transactions":{"RclPrevLot":{"sourceUuid":"55c696a7-080b-4709-98f0-6be9219b62e8","name":"RclPrevLot","program":"EXT130MI","description":"Change Expiration Date","active":true,"multi":false,"modified":1697877419169,"modifiedBy":"900107","outputFields":[{"name":"CONO","description":"Company","length":3,"mandatory":false,"type":"N"},{"name":"MSNR","description":"Message number","length":15,"mandatory":false,"type":"A"},{"name":"MSLN","description":"Message line number","length":5,"mandatory":false,"type":"N"},{"name":"MSGS","description":"Sequence number","length":3,"mandatory":false,"type":"N"}],"inputFields":[{"name":"CONO","description":"Company","length":3,"mandatory":false,"type":"N"},{"name":"E0PA","description":"Partner","length":17,"mandatory":true,"type":"A"},{"name":"E065","description":"Message Type","length":6,"mandatory":true,"type":"A"},{"name":"WHLO","description":"Warehouse","length":3,"mandatory":true,"type":"A"},{"name":"WHSL","description":"Location","length":10,"mandatory":true,"type":"A"},{"name":"ITNO","description":"Item Number","length":15,"mandatory":true,"type":"A"},{"name":"BANO","description":"Lot Number","length":20,"mandatory":true,"type":"A"},{"name":"CAMU","description":"Container","length":20,"mandatory":true,"type":"A"},{"name":"RMVC","description":"Remove Container","length":1,"mandatory":false,"type":"A"},{"name":"RSCD","description":"Reason code","length":3,"mandatory":false,"type":"A"}],"utilities":["DateUtil"],"market":"ALL"}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"55c696a7-080b-4709-98f0-6be9219b62e8":{"uuid":"55c696a7-080b-4709-98f0-6be9219b62e8","updated":1697563158241,"updatedBy":"900107","created":1697877400354,"createdBy":"900107","apiVersion":"UNKNOWN","beVersion":"16.0.0.20230822184312.7","language":"GROOVY","codeHash":"36A43824CB2E075614251306D8D6EADBC8B50E135AC774FA4743B0BB67E172BB","code":"LyoqDQogKiBSRUFETUUNCiAqIFJlY2xhc3MgUHJldmlvdXMgTG90DQogKg0KICogTmFtZTogRVhUMTMwTUkuUmNsUHJldkxvdA0KICogRGVzY3JpcHRpb246IFJlY2xhc3MgUHJldmlvdXMgTG90DQogKiBEYXRlCSAgICAgIENoYW5nZWQgQnkgICAgICAgICAgICBEZXNjcmlwdGlvbg0KICogMjAyMjEyMjAJICBBSkFZWSAgICAgICAgCVJlY2xhc3MgUHJldmlvdXMgTG90DQogKiAyMDIzMDcwMSAgIEFKQVlZICAgICAgICAgVXBkYXRlZCB0aGUgbG9naWMgdG8gY29weSBRSSBSZXF1ZXN0IEJhc2lzDQogKiAyMDIzMTAxNyAgIEFqYXkgICAgICAgICAgICBDb2RlIENsZWFudXANCiAqLw0KIA0KDQpjbGFzcyBSY2xQcmV2TG90IGV4dGVuZHMgRXh0ZW5kTTNUcmFuc2FjdGlvbiB7DQogIHByaXZhdGUgZmluYWwgTUlBUEkgbWkNCiAgcHJpdmF0ZSBmaW5hbCBNSUNhbGxlckFQSSBtaUNhbGxlcg0KICBwcml2YXRlIGZpbmFsIERhdGFiYXNlQVBJIGRhdGFiYXNlDQogIHByaXZhdGUgZmluYWwgTG9nZ2VyQVBJIGxvZ2dlcg0KICBwcml2YXRlIGZpbmFsIFByb2dyYW1BUEkgcHJvZ3JhbQ0KICBwcml2YXRlIGZpbmFsIFV0aWxpdHlBUEkgdXRpbGl0eQ0KDQogIC8vSW5wdXQgZmllbGRzDQogIFN0cmluZyBpQkFOTywgaVdITE8sIGlDQU1VLCBpV0hTTCwgaUlUTk8sIGlFMFBBLCBpRTA2NSwgaVJNVkMsIGlSU0NEDQoNCiAgU3RyaW5nIG9yaWdXSExPLCBvcmlnQkFOTywgb3JpZ0NBTVUsIG9yaWdXSFNMLCBteUx2bF9CQU5PLCBiYXNlQkFOTywgTUlUTE9DX0JBTk8sIE1JVExPQ19XSExPLCBNSVRMT0NfSVROTywgTUlUTE9DX0NBTVUsIE1JVExPQ19XSFNMDQogIFN0cmluZyBFWFQ0MDFfU0JBTiwgRVhUNDAxX0xXSEwsIEVYVDQwMV9JVE5PLCBFWFQ0MDFfUEJBTiwgRVhUNDAxX0NBTVUsIEVYVDQwMV9MV0hTLCBFWFQ0MDFfQkFOTw0KICBib29sZWFuIHh4Q2hnU3RzLCBza2lwVG9CYXNlDQoNCiAgaW50IENPTk8NCg0KICBTdHJpbmcgekN1cnJTdGFzLCB6TmV3U1RBUywgTUlUTE9DX1NUQVMsIEVYVDQwMV9TVEFTDQoNCiAgYm9vbGVhbiBJTjkxID0gZmFsc2UNCiAgYm9vbGVhbiBJTjkzID0gZmFsc2UNCiAgYm9vbGVhbiBsb29wQ29uZGl0aW9uID0gZmFsc2UNCg0KICBEQkNvbnRhaW5lciBjb250YWluZXJNSVRMT0MsIGNvbnRhaW5lckVYVDQwMSwgY29udGFpbmVyUU1TUlFIDQoNCiAgUmNsUHJldkxvdChNSUFQSSBtaSwgTUlDYWxsZXJBUEkgbWlDYWxsZXIsIERhdGFiYXNlQVBJIGRhdGFiYXNlLCBMb2dnZXJBUEkgbG9nZ2VyLCBQcm9ncmFtQVBJIHByb2dyYW0sIFV0aWxpdHlBUEkgdXRpbGl0eSkgew0KICAgIHRoaXMubWkgPSBtaQ0KICAgIHRoaXMubWlDYWxsZXIgPSBtaUNhbGxlcg0KICAgIHRoaXMuZGF0YWJhc2UgPSBkYXRhYmFzZQ0KICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyDQogICAgdGhpcy5wcm9ncmFtID0gcHJvZ3JhbQ0KICAgIHRoaXMudXRpbGl0eSA9IHV0aWxpdHkNCiAgfQ0KDQogIC8qKg0KICAgKiBNYWluIG1ldGhvZA0KICAgKiBAcGFyYW0NCiAgICogQHJldHVybg0KICAgKi8NCiAgdm9pZCBtYWluKCkgew0KICAgIGlCQU5PID0gbWkuaW5EYXRhLmdldCgiQkFOTyIpID09IG51bGwgPyAiIiA6IG1pLmluRGF0YS5nZXQoIkJBTk8iKS50cmltKCkNCiAgICBpV0hMTyA9IG1pLmluRGF0YS5nZXQoIldITE8iKSA9PSBudWxsID8gIiIgOiBtaS5pbkRhdGEuZ2V0KCJXSExPIikudHJpbSgpDQogICAgaUUwUEEgPSBtaS5pbkRhdGEuZ2V0KCJFMFBBIikgPT0gbnVsbCA/ICIiIDogbWkuaW5EYXRhLmdldCgiRTBQQSIpLnRyaW0oKQ0KICAgIGlFMDY1ID0gbWkuaW5EYXRhLmdldCgiRTA2NSIpID09IG51bGwgPyAiIiA6IG1pLmluRGF0YS5nZXQoIkUwNjUiKS50cmltKCkNCiAgICBpSVROTyA9IG1pLmluRGF0YS5nZXQoIklUTk8iKSA9PSBudWxsID8gIiIgOiBtaS5pbkRhdGEuZ2V0KCJJVE5PIikudHJpbSgpDQogICAgaUNBTVUgPSBtaS5pbkRhdGEuZ2V0KCJDQU1VIikgPT0gbnVsbCA/ICIiIDogbWkuaW5EYXRhLmdldCgiQ0FNVSIpLnRyaW0oKQ0KICAgIGlXSFNMID0gbWkuaW5EYXRhLmdldCgiV0hTTCIpID09IG51bGwgPyAiIiA6IG1pLmluRGF0YS5nZXQoIldIU0wiKS50cmltKCkNCiAgICBpUk1WQyA9IG1pLmluRGF0YS5nZXQoIlJNVkMiKSA9PSBudWxsID8gIiIgOiBtaS5pbkRhdGEuZ2V0KCJSTVZDIikudHJpbSgpDQogICAgaVJTQ0QgPSBtaS5pbkRhdGEuZ2V0KCJSU0NEIikgPT0gbnVsbCA/ICIiIDogbWkuaW5EYXRhLmdldCgiUlNDRCIpLnRyaW0oKQ0KDQogICAgb3JpZ1dITE8gPSAiIg0KICAgIG9yaWdCQU5PID0gIiINCiAgICBvcmlnQ0FNVSA9ICIiDQogICAgb3JpZ1dIU0wgPSAiIg0KICAgIG15THZsX0JBTk8gPSBpQkFOTw0KDQogICAgeHhDaGdTdHMgPSB0cnVlDQogICAgY3J0UmVjbGFzc1RvUHJldkxvdChpQkFOTywgaVdITE8sIGlDQU1VLCBpV0hTTCwgaUlUTk8sIGlFMFBBLCBpRTA2NSwgaVJNVkMsIGlSU0NEKQ0KDQogIH0NCg0KICBwcml2YXRlIHZvaWQgY3J0UmVjbGFzc1RvUHJldkxvdChTdHJpbmcgaUJBTk9fUmNsUHJldkxvdCwgU3RyaW5nIGlXSExPX1JjbFByZXZMb3QsIFN0cmluZyBpQ0FNVV9SY2xQcmV2TG90LCBTdHJpbmcgaVdIU0xfUmNsUHJldkxvdCwgU3RyaW5nIGlJVE5PX1JjbFByZXZMb3QsIFN0cmluZyBpRTBQQV9SY2xQcmV2TG90LCBTdHJpbmcgaUUwNjVfUmNsUHJldkxvdCwgU3RyaW5nIGlSTVZDX1JjbFByZXZMb3QsIFN0cmluZyBpUlNDRF9SY2xQcmV2TG90KSB7DQogICAgU3RyaW5nIEVYVDQwMV9TQkFOLCBFWFQ0MDFfTFdITCwgRVhUNDAxX0lUTk8sIEVYVDQwMV9QQkFOLCBFWFQ0MDFfQ0FNVSwgRVhUNDAxX0xXSFMsIEVYVDQwMV9CQU5PDQogICAgU3RyaW5nIE1JVExPQ19CQU5PLCBNSVRMT0NfV0hMTywgTUlUTE9DX0lUTk8sIE1JVExPQ19DQU1VLCBNSVRMT0NfV0hTTA0KICAgIGJvb2xlYW4gc2tpcFRvQmFzZQ0KDQogICAgU3RyaW5nIHpDdXJyU3RhcywgTUlUTE9DX1NUQVMsIEVYVDQwMV9TVEFTDQoNCiAgICBib29sZWFuIElOOTEgPSBmYWxzZQ0KICAgIGJvb2xlYW4gSU45MyA9IGZhbHNlDQogICAgYm9vbGVhbiBsb29wQ29uZGl0aW9uID0gZmFsc2UNCg0KICAgIGludCBDT05PID0gcHJvZ3JhbS5MREFaRC5DT05PLnRvU3RyaW5nKCkudG9JbnRlZ2VyKCkNCg0KICAgIERCQWN0aW9uIGFjdGlvbk1JVFdITCA9IGRhdGFiYXNlLnRhYmxlKCJNSVRXSEwiKS5pbmRleCgiMDAiKS5zZWxlY3Rpb24oIk1XQ09OTyIsICJNV1dITE8iKS5idWlsZCgpDQogICAgREJDb250YWluZXIgY29udGFpbmVyTUlUV0hMID0gYWN0aW9uTUlUV0hMLmdldENvbnRhaW5lcigpDQoNCiAgICBjb250YWluZXJNSVRXSEwuc2V0KCJNV0NPTk8iLCBDT05PKQ0KICAgIGNvbnRhaW5lck1JVFdITC5zZXQoIk1XV0hMTyIsIGlXSExPX1JjbFByZXZMb3QpDQoNCiAgICBhY3Rpb25NSVRXSEwucmVhZChjb250YWluZXJNSVRXSEwpDQoNCiAgICBTdHJpbmcgYmFzZUJBTk8gPSBpQkFOT19SY2xQcmV2TG90DQoNCiAgICBpZiAob3JpZ1dITE8udHJpbSgpLmlzRW1wdHkoKSkgew0KICAgICAgb3JpZ1dITE8gPSBpV0hMT19SY2xQcmV2TG90DQogICAgICBvcmlnQkFOTyA9IGlCQU5PX1JjbFByZXZMb3QNCiAgICAgIG9yaWdDQU1VID0gaUNBTVVfUmNsUHJldkxvdA0KICAgICAgb3JpZ1dIU0wgPSBpV0hTTF9SY2xQcmV2TG90DQogICAgfQ0KDQogICAgREJBY3Rpb24gYWN0aW9uTUlUTE9DID0gZGF0YWJhc2UudGFibGUoIk1JVExPQyIpLmluZGV4KCIwMCIpLnNlbGVjdGlvbigiTUxDT05PIiwgIk1MV0hMTyIsICJNTFdIU0wiLCAiTUxJVE5PIiwgIk1MQkFOTyIsICJNTENBTVUiLCAiTUxTVEFTIiwgIk1MU1RRVCIpLmJ1aWxkKCkNCiAgICBjb250YWluZXJNSVRMT0MgPSBhY3Rpb25NSVRMT0MuZ2V0Q29udGFpbmVyKCkNCg0KICAgIGNvbnRhaW5lck1JVExPQy5zZXQoIk1MQ09OTyIsIENPTk8pDQogICAgY29udGFpbmVyTUlUTE9DLnNldCgiTUxXSExPIiwgb3JpZ1dITE8pDQogICAgY29udGFpbmVyTUlUTE9DLnNldCgiTUxJVE5PIiwgaUlUTk9fUmNsUHJldkxvdCkNCiAgICBjb250YWluZXJNSVRMT0Muc2V0KCJNTFdIU0wiLCBvcmlnV0hTTCkNCiAgICBjb250YWluZXJNSVRMT0Muc2V0KCJNTEJBTk8iLCBvcmlnQkFOTykNCiAgICBjb250YWluZXJNSVRMT0Muc2V0KCJNTENBTVUiLCBvcmlnQ0FNVSkNCg0KICAgIHpDdXJyU3RhcyA9ICcnDQoNCiAgICBDbG9zdXJlIDwgPyA+IHJlYWRBbGxSZWNvcmRNSVRMT0MgPSB7DQogICAgICBEQkNvbnRhaW5lciByZXN1bHRDb250YWluZXIgLT4NCiAgICAgIGNvbnRhaW5lck1JVExPQyA9IHJlc3VsdENvbnRhaW5lcg0KICAgICAgekN1cnJTdGFzID0gcmVzdWx0Q29udGFpbmVyLmdldCgiTUxTVEFTIikudG9TdHJpbmcoKQ0KICAgICAgTUlUTE9DX0JBTk8gPSByZXN1bHRDb250YWluZXIuZ2V0U3RyaW5nKCJNTEJBTk8iKQ0KICAgICAgTUlUTE9DX0NBTVUgPSByZXN1bHRDb250YWluZXIuZ2V0U3RyaW5nKCJNTENBTVUiKQ0KICAgICAgTUlUTE9DX0lUTk8gPSByZXN1bHRDb250YWluZXIuZ2V0U3RyaW5nKCJNTElUTk8iKQ0KICAgICAgTUlUTE9DX1dITE8gPSByZXN1bHRDb250YWluZXIuZ2V0U3RyaW5nKCJNTFdITE8iKQ0KICAgICAgTUlUTE9DX1dIU0wgPSByZXN1bHRDb250YWluZXIuZ2V0U3RyaW5nKCJNTFdIU0wiKQ0KICAgICAgTUlUTE9DX1NUQVMgPSByZXN1bHRDb250YWluZXIuZ2V0KCJNTFNUQVMiKS50b1N0cmluZygpDQogICAgfQ0KDQogICAgbG9nZ2VyLmRlYnVnKCJSY2xQcmV2TG90IEJlZm9yZSByZWFkaW5nIE1JVExPQyIpDQogICAgbG9nZ2VyLmRlYnVnKCJvcmlnQkFOTzogIiArIG9yaWdCQU5PICsgIiB8IHpOZXdTdGFzOiAiICsgek5ld1NUQVMpDQogICAgbG9nZ2VyLmRlYnVnKCJjb250YWluZXJNSVRMT0M6ICIgKyBjb250YWluZXJNSVRMT0MudG9TdHJpbmcoKSkNCg0KICAgIGlmIChhY3Rpb25NSVRMT0MucmVhZEFsbChjb250YWluZXJNSVRMT0MsIDYsIHJlYWRBbGxSZWNvcmRNSVRMT0MpKSB7DQogICAgICBNYXAgPCBTdHJpbmcsIFN0cmluZyA+IGFkZFJlY2xhc3NJbnB1dHMgPSBbDQogICAgICAgICJRTFFUIjogIiIsDQogICAgICAgICJQUkZMIjogIipFWEUiLA0KICAgICAgICAiRTBQQSI6IGlFMFBBX1JjbFByZXZMb3QsDQogICAgICAgICJFMDY1IjogaUUwNjVfUmNsUHJldkxvdCwNCiAgICAgICAgIldITE8iOiBvcmlnV0hMTywNCiAgICAgICAgIldIU0wiOiBvcmlnV0hTTCwNCiAgICAgICAgIklUTk8iOiBpSVROT19SY2xQcmV2TG90LA0KICAgICAgICAiQkFOTyI6IG9yaWdCQU5PLA0KICAgICAgICAiQ0FNVSI6IG9yaWdDQU1VLA0KICAgICAgICAiTklUTiI6IGlJVE5PX1JjbFByZXZMb3QsDQogICAgICAgICJOQkFOIjogTUlUTE9DX0JBTk8sDQogICAgICAgICJRUkJTIjogIjMiDQogICAgICBdDQoNCiAgICAgIGxvZ2dlci5kZWJ1ZygiUmNsUHJldkxvdCBCZWZvcmUgcmVhZGluZyBNSVRMT0MiKQ0KICAgICAgbG9nZ2VyLmRlYnVnKCJvcmlnQkFOTzogIiArIG9yaWdCQU5PICsgIiB8IHpOZXdTdGFzOiAiICsgek5ld1NUQVMgKyAiIHwgekN1cnJTdGFzOiAiICsgekN1cnJTdGFzKQ0KICAgICAgbG9nZ2VyLmRlYnVnKCJjb250YWluZXJNSVRMT0M6ICIgKyBjb250YWluZXJNSVRMT0MudG9TdHJpbmcoKSkNCiAgICAgIGxvZ2dlci5kZWJ1ZygiYWRkUmVjbGFzc0lucHV0czogIiArIGFkZFJlY2xhc3NJbnB1dHMudG9TdHJpbmcoKSkNCg0KICAgICAgaWYgKHpDdXJyU3RhcyA9PSAiMyIgfHwgek5ld1NUQVMgPT0gJzMnKSB7DQogICAgICAgIHpOZXdTVEFTID0gIjMiDQoNCiAgICAgICAgREJBY3Rpb24gYWN0aW9uRVhUNDAxID0gZGF0YWJhc2UudGFibGUoIkVYVDQwMSIpLmluZGV4KCIyMCIpLnNlbGVjdEFsbEZpZWxkcygpLmJ1aWxkKCkNCiAgICAgICAgY29udGFpbmVyRVhUNDAxID0gYWN0aW9uRVhUNDAxLmdldENvbnRhaW5lcigpDQoNCiAgICAgICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhDT05PIiwgQ09OTykNCiAgICAgICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhMV0hMIiwgTUlUTE9DX1dITE8pDQogICAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYSVROTyIsIE1JVExPQ19JVE5PKQ0KICAgICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWFNCQU4iLCBNSVRMT0NfQkFOTykNCiAgICAgICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhDQU1VIiwgTUlUTE9DX0NBTVUpDQogICAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYTFdIUyIsIE1JVExPQ19XSFNMKQ0KDQogICAgICAgIExpc3QgPCBEQkNvbnRhaW5lciA+IGFycmF5T2ZDb250YWluZXJzID0gbmV3IEFycmF5TGlzdCA8IERCQ29udGFpbmVyID4gKCkNCiAgICAgICAgQ2xvc3VyZSA8ID8gPiByZWFkQWxsUmVjb3JkRVhUNDAxID0gew0KICAgICAgICAgIERCQ29udGFpbmVyIHJlc3VsdENvbnRhaW5lciAtPg0KICAgICAgICAgIGFycmF5T2ZDb250YWluZXJzLmFkZChyZXN1bHRDb250YWluZXIpDQoNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChhY3Rpb25FWFQ0MDEucmVhZEFsbChjb250YWluZXJFWFQ0MDEsIDYsIHJlYWRBbGxSZWNvcmRFWFQ0MDEpKSB7DQogICAgICAgICAgREJDb250YWluZXIgcmVzdWx0Q29udGFpbmVyID0gYXJyYXlPZkNvbnRhaW5lcnNbMF0NCg0KICAgICAgICAgIGFkZFJlY2xhc3NJbnB1dHMuTkJBTiA9IHJlc3VsdENvbnRhaW5lci5nZXRTdHJpbmcoIkVYQkFOTyIpDQogICAgICAgICAgYWRkUmVjbGFzc0lucHV0cy5SU0NEID0gIiINCg0KICAgICAgICAgIGxvZ2dlci5kZWJ1ZygiUmNsUHJldkxvdCBCZWZvcmUgY2FsbGluZyByZWplY3RBZmZlY3RBbGxMZXZlbHMiKQ0KICAgICAgICAgIGxvZ2dlci5kZWJ1Zygib3JpZ0JBTk86ICIgKyBvcmlnQkFOTyArICIgfCB6TmV3U3RhczogIiArIHpOZXdTVEFTICsgIiB8IHpDdXJyU3RhczogIiArIHpDdXJyU3RhcykNCiAgICAgICAgICBsb2dnZXIuZGVidWcoImNvbnRhaW5lck1JVExPQzogIiArIGNvbnRhaW5lck1JVExPQy50b1N0cmluZygpKQ0KDQogICAgICAgICAgcmVqZWN0QWZmZWN0QWxsTGV2ZWxzKENPTk8sIG9yaWdXSExPLCBvcmlnQkFOTywgb3JpZ0NBTVUsIG9yaWdXSFNMLCBFWFQ0MDFfU0JBTiwgRVhUNDAxX0JBTk8pDQoNCiAgICAgICAgICBsb2dnZXIuZGVidWcoIlJjbFByZXZMb3QgQWZ0ZXIgY2FsbGluZyByZWplY3RBZmZlY3RBbGxMZXZlbHMiKQ0KICAgICAgICAgIGxvZ2dlci5kZWJ1Zygib3JpZ0JBTk86ICIgKyBvcmlnQkFOTyArICIgfCB6TmV3U3RhczogIiArIHpOZXdTVEFTICsgIiB8IHpDdXJyU3RhczogIiArIHpDdXJyU3RhcykNCiAgICAgICAgICBsb2dnZXIuZGVidWcoImNvbnRhaW5lck1JVExPQzogIiArIGNvbnRhaW5lck1JVExPQy50b1N0cmluZygpKQ0KICAgICAgICB9DQoNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHNraXBUb0Jhc2UgPSBmYWxzZQ0KDQogICAgICAgIERCQWN0aW9uIGFjdGlvbkVYVDQwMSA9IGRhdGFiYXNlLnRhYmxlKCJFWFQ0MDEiKS5pbmRleCgiMjAiKS5zZWxlY3RBbGxGaWVsZHMoKS5idWlsZCgpDQogICAgICAgIGNvbnRhaW5lckVYVDQwMSA9IGFjdGlvbkVYVDQwMS5nZXRDb250YWluZXIoKQ0KDQogICAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYQ09OTyIsIENPTk8pDQogICAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYTFdITCIsIG9yaWdXSExPKQ0KICAgICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWElUTk8iLCBpSVROT19SY2xQcmV2TG90KQ0KICAgICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWFNCQU4iLCBvcmlnQkFOTykNCiAgICAgICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhDQU1VIiwgb3JpZ0NBTVUpDQogICAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYTFdIUyIsIG9yaWdXSFNMKQ0KDQogICAgICAgIENsb3N1cmUgPCA/ID4gcmVhZEFsbFJlY29yZHNFWFQ0MDEgPSB7DQogICAgICAgICAgREJDb250YWluZXIgcmVzdWx0Q29udGFpbmVyIC0+DQogICAgICAgICAgYWRkUmVjbGFzc0lucHV0cy5OQkFOID0gcmVzdWx0Q29udGFpbmVyLmdldFN0cmluZygiRVhQQkFOIikNCiAgICAgICAgICBiYXNlQkFOTyA9IHJlc3VsdENvbnRhaW5lci5nZXRTdHJpbmcoIkVYQkFOTyIpDQoNCiAgICAgICAgICBhY3Rpb25FWFQ0MDEgPSBkYXRhYmFzZS50YWJsZSgiRVhUNDAxIikuaW5kZXgoIjIwIikuc2VsZWN0QWxsRmllbGRzKCkuYnVpbGQoKQ0KDQogICAgICAgICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhDT05PIiwgQ09OTykNCiAgICAgICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWExXSEwiLCByZXN1bHRDb250YWluZXIuZ2V0U3RyaW5nKCJFWExXSEwiKSkNCiAgICAgICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWElUTk8iLCByZXN1bHRDb250YWluZXIuZ2V0U3RyaW5nKCJFWElUTk8iKSkNCiAgICAgICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWFNCQU4iLCByZXN1bHRDb250YWluZXIuZ2V0U3RyaW5nKCJFWFBCQU4iKSkNCiAgICAgICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWENBTVUiLCByZXN1bHRDb250YWluZXIuZ2V0U3RyaW5nKCJFWENBTVUiKSkNCiAgICAgICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWExXSFMiLCByZXN1bHRDb250YWluZXIuZ2V0U3RyaW5nKCJFWExXSFMiKSkNCg0KICAgICAgICAgIENsb3N1cmUgPCA/ID4gcmVhZEFsbFJlY29yZHNFWFQ0MDFfMSA9IHsNCiAgICAgICAgICAgIERCQ29udGFpbmVyIHJlc3VsdENvbnRhaW5lcl8xIC0+DQogICAgICAgICAgICBjb250YWluZXJFWFQ0MDEgPSByZXN1bHRDb250YWluZXJfMQ0KICAgICAgICAgICAgRVhUNDAxX1NUQVMgPSByZXN1bHRDb250YWluZXJfMS5nZXQoIkVYU1RBUyIpLnRvU3RyaW5nKCkNCiAgICAgICAgICAgIEVYVDQwMV9TQkFOID0gcmVzdWx0Q29udGFpbmVyXzEuZ2V0KCJFWFNCQU4iKS50b1N0cmluZygpDQogICAgICAgICAgICBFWFQ0MDFfTFdITCA9IHJlc3VsdENvbnRhaW5lcl8xLmdldCgiRVhMV0hMIikudG9TdHJpbmcoKQ0KICAgICAgICAgICAgRVhUNDAxX0lUTk8gPSByZXN1bHRDb250YWluZXJfMS5nZXQoIkVYSVROTyIpLnRvU3RyaW5nKCkNCiAgICAgICAgICAgIEVYVDQwMV9QQkFOID0gcmVzdWx0Q29udGFpbmVyXzEuZ2V0KCJFWFBCQU4iKS50b1N0cmluZygpDQogICAgICAgICAgICBFWFQ0MDFfQ0FNVSA9IHJlc3VsdENvbnRhaW5lcl8xLmdldCgiRVhDQU1VIikudG9TdHJpbmcoKQ0KICAgICAgICAgICAgRVhUNDAxX0xXSFMgPSByZXN1bHRDb250YWluZXJfMS5nZXQoIkVYTFdIUyIpLnRvU3RyaW5nKCkNCiAgICAgICAgICAgIEVYVDQwMV9CQU5PID0gcmVzdWx0Q29udGFpbmVyXzEuZ2V0KCJFWEJBTk8iKS50b1N0cmluZygpDQogICAgICAgICAgfQ0KDQogICAgICAgICAgSU45MyA9ICFhY3Rpb25FWFQ0MDEucmVhZEFsbChjb250YWluZXJFWFQ0MDEsIDYsIDEsIHJlYWRBbGxSZWNvcmRzRVhUNDAxXzEpDQoNCiAgICAgICAgICBsb2dnZXIuZGVidWcoIkNoZWNrIElOOTM6ICIgKyBJTjkzKQ0KICAgICAgICAgIGxvZ2dlci5kZWJ1ZygiQ2hlY2sgcmVzdWx0Q29udGFpbmVyOiAiICsgcmVzdWx0Q29udGFpbmVyLnRvU3RyaW5nKCkpDQogICAgICAgICAgbG9nZ2VyLmRlYnVnKCJDaGVjayBFWFNUQVM6ICIgKyByZXN1bHRDb250YWluZXIuZ2V0KCJFWFNUQVMiKS50b1N0cmluZygpKQ0KICAgICAgICAgIGxvZ2dlci5kZWJ1ZygiRVhTVEFTOiAiICsgRVhUNDAxX1NUQVMpDQogICAgICAgICAgaWYgKElOOTMpIHsNCiAgICAgICAgICAgIGFkZFJlY2xhc3NJbnB1dHMuTkJBTiA9IGJhc2VCQU5PDQogICAgICAgICAgICBhZGRSZWNsYXNzSW5wdXRzLkFMT0MgPSAiMSINCiAgICAgICAgICAgIElOOTMgPSB0cnVlDQogICAgICAgICAgICB6TmV3U1RBUyA9ICIyIg0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgfQ0KDQogICAgICAgICAgaWYgKCFJTjkzICYmIEVYVDQwMV9TVEFTID09ICIxIikgew0KICAgICAgICAgICAgYWRkUmVjbGFzc0lucHV0cy5OQkFOID0gRVhUNDAxX1NCQU4NCiAgICAgICAgICAgIHpDdXJyU3RhcyA9IEVYVDQwMV9TVEFTDQogICAgICAgICAgICB6TmV3U1RBUyA9ICIxIg0KICAgICAgICAgICAgSU45MyA9IHRydWUNCiAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgIH0NCg0KICAgICAgICAgIGlmICghSU45MyAmJiBFWFQ0MDFfU1RBUyAhPSAiMSIpIHsNCiAgICAgICAgICAgIHpOZXdTVEFTID0gRVhUNDAxX1NUQVMNCiAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBsb2dnZXIuZGVidWcoIlJjbFByZXZMb3QgTm90IFJlamVjdCBMb2dpYyB8IHNraXB0b0Jhc2UgPSBmYWxzZSIpDQogICAgICAgIGxvZ2dlci5kZWJ1Zygib3JpZ0JBTk86ICIgKyBvcmlnQkFOTyArICIgfCB6TmV3U3RhczogIiArIHpOZXdTVEFTICsgIiB8IHpDdXJyU3RhczogIiArIHpDdXJyU3RhcykNCiAgICAgICAgbG9nZ2VyLmRlYnVnKCJjb250YWluZXJNSVRMT0M6ICIgKyBjb250YWluZXJNSVRMT0MudG9TdHJpbmcoKSkNCiAgICAgICAgbG9nZ2VyLmRlYnVnKCJjb250YWluZXJFWFQ0MDE6ICIgKyBjb250YWluZXJFWFQ0MDEudG9TdHJpbmcoKSkNCg0KICAgICAgICBpZiAoIWFjdGlvbkVYVDQwMS5yZWFkQWxsKGNvbnRhaW5lckVYVDQwMSwgNiwgMSwgcmVhZEFsbFJlY29yZHNFWFQ0MDEpKSB7DQoNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICBJTjkxID0gZmFsc2UNCiAgICAgICAgfQ0KDQogICAgICAgIGxvZ2dlci5kZWJ1ZygiRW50ZXJpbmcgdGhlIElOOTEgd2hpbGUgbG9vcCB8IElOOTE6ICIgKyBJTjkxICsgIiB8IElOOTM6ICIgKyBJTjkzKQ0KDQogICAgICAgIHdoaWxlICghSU45MSAmJiAhSU45Mykgew0KDQogICAgICAgICAgYm9vbGVhbiB0ZXN0c1ZlcmlmaWVkID0gZmFsc2U7DQoNCiAgICAgICAgICBpZiAoIXRlc3RzVmVyaWZpZWQpIHsNCiAgICAgICAgICAgIERCQWN0aW9uIGFjdGlvblFNU1JRSCA9IGRhdGFiYXNlLnRhYmxlKCJRTVNSUUgiKS5pbmRleCgiMzAiKS5zZWxlY3Rpb24oIlJIQ09OTyIsICJSSElUTk8iLCAiUkhCQU5PIiwgIlJIUVNUQSIsICJSSFFSUlAiLCAiUkhRQVBSIikucmV2ZXJzZSgpLmJ1aWxkKCkNCiAgICAgICAgICAgIGNvbnRhaW5lclFNU1JRSCA9IGFjdGlvblFNU1JRSC5nZXRDb250YWluZXIoKQ0KDQogICAgICAgICAgICBjb250YWluZXJRTVNSUUguc2V0KCJSSENPTk8iLCBDT05PKQ0KICAgICAgICAgICAgY29udGFpbmVyUU1TUlFILnNldCgiUkhJVE5PIiwgaUlUTk9fUmNsUHJldkxvdCkNCiAgICAgICAgICAgIGNvbnRhaW5lclFNU1JRSC5zZXQoIlJIQkFOTyIsIGNvbnRhaW5lckVYVDQwMS5nZXRTdHJpbmcoIkVYQkFOTyIpKQ0KDQogICAgICAgICAgICBDbG9zdXJlIDwgPyA+IHJlYWRBbGxSZWNvcmRRTVNSUUggPSB7DQogICAgICAgICAgICAgIERCQ29udGFpbmVyIHJlc3VsdENvbnRhaW5lciAtPg0KICAgICAgICAgICAgICBjb250YWluZXJRTVNSUUggPSByZXN1bHRDb250YWluZXINCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGFjdGlvblFNU1JRSC5yZWFkQWxsKGNvbnRhaW5lclFNU1JRSCwgMywgMSwgcmVhZEFsbFJlY29yZFFNU1JRSCkpIHsNCiAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lclFNU1JRSC5nZXRJbnQoIlJIUVNUQSIpIDwgNCAmJiBjb250YWluZXJRTVNSUUguZ2V0U3RyaW5nKCJSSFFSUlAiKS50cmltKCkuaXNFbXB0eSgpKSB7DQogICAgICAgICAgICAgICAgdGVzdHNWZXJpZmllZCA9IGZhbHNlDQogICAgICAgICAgICAgICAgc2tpcFRvQmFzZSA9IGZhbHNlDQoNCiAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyUU1TUlFILmdldEludCgiUkhRQVBSIikgPiAwKSB7DQogICAgICAgICAgICAgICAgICB0ZXN0c1ZlcmlmaWVkID0gdHJ1ZQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChjb250YWluZXJRTVNSUUguZ2V0SW50KCJSSFFBUFIiKSA9PSAyICYmIGNvbnRhaW5lck1JVExPQy5nZXQoIk1MU1RBUyIpID09ICIxIg0KICAgICAgICAgICAgICAgICAgYXMgY2hhcikgew0KICAgICAgICAgICAgICAgICAgekN1cnJTdGFzID0gIjMiDQogICAgICAgICAgICAgICAgICB6TmV3U1RBUyA9ICIzIg0KICAgICAgICAgICAgICAgICAgc2tpcFRvQmFzZSA9IHRydWUNCiAgICAgICAgICAgICAgICAgIGFkZFJlY2xhc3NJbnB1dHMuTkJBTiA9IGJhc2VCQU5PDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgfQ0KDQogICAgICAgICAgaWYgKHpOZXdTVEFTID09ICcxJyB8fCB6Q3VyclN0YXMgPT0gJzMnIHx8IHNraXBUb0Jhc2UgfHwgKHpOZXdTVEFTID09ICcxJyAmJiB0ZXN0c1ZlcmlmaWVkKSkgew0KICAgICAgICAgICAgaWYgKGNvbnRhaW5lclFNU1JRSC5nZXQoIlJIUVNUQSIpID09ICIxIg0KICAgICAgICAgICAgICBhcyBjaGFyKSB7DQogICAgICAgICAgICAgIGFkZFJlY2xhc3NJbnB1dHMuTkJBTiA9IGNvbnRhaW5lckVYVDQwMS5nZXRTdHJpbmcoIkVYU0JBTiIpDQogICAgICAgICAgICB9DQogICAgICAgICAgICBJTjkxID0gdHJ1ZQ0KICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBhY3Rpb25FWFQ0MDEgPSBkYXRhYmFzZS50YWJsZSgiRVhUNDAxIikuaW5kZXgoIjIwIikuc2VsZWN0QWxsRmllbGRzKCkuYnVpbGQoKQ0KDQogICAgICAgICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWENPTk8iLCBDT05PKQ0KICAgICAgICAgICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhMV0hMIiwgY29udGFpbmVyRVhUNDAxLmdldFN0cmluZygiRVhMV0hMIikpDQogICAgICAgICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWElUTk8iLCBjb250YWluZXJFWFQ0MDEuZ2V0U3RyaW5nKCJFWElUTk8iKSkNCiAgICAgICAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYU0JBTiIsIGNvbnRhaW5lckVYVDQwMS5nZXRTdHJpbmcoIkVYUEJBTiIpKQ0KICAgICAgICAgICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhDQU1VIiwgY29udGFpbmVyRVhUNDAxLmdldFN0cmluZygiRVhDQU1VIikpDQogICAgICAgICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWExXSFMiLCBjb250YWluZXJFWFQ0MDEuZ2V0U3RyaW5nKCJFWExXSFMiKSkNCg0KICAgICAgICAgICAgcmVhZEFsbFJlY29yZHNFWFQ0MDEgPSB7DQogICAgICAgICAgICAgIERCQ29udGFpbmVyIHJlc3VsdENvbnRhaW5lciAtPg0KICAgICAgICAgICAgICBjb250YWluZXJFWFQ0MDEgPSByZXN1bHRDb250YWluZXINCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgSU45MyA9ICFhY3Rpb25FWFQ0MDEucmVhZEFsbChjb250YWluZXJFWFQ0MDEsIDYsIDEsIHJlYWRBbGxSZWNvcmRzRVhUNDAxKQ0KICAgICAgICAgICAgSU45MSA9IElOOTMNCg0KICAgICAgICAgICAgaWYgKElOOTMpIHsNCiAgICAgICAgICAgICAgYWRkUmVjbGFzc0lucHV0cy5OQkFOID0gYmFzZUJBTk8NCiAgICAgICAgICAgICAgYWRkUmVjbGFzc0lucHV0cy5BTE9DID0gIjEiDQogICAgICAgICAgICAgIElOOTEgPSB0cnVlDQogICAgICAgICAgICAgIHpOZXdTVEFTID0gIjIiDQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoIUlOOTMgJiYgY29udGFpbmVyRVhUNDAxLmdldCgiRVhTVEFTIikgPT0gIjEiDQogICAgICAgICAgICAgIGFzIGNoYXIpIHsNCiAgICAgICAgICAgICAgYWRkUmVjbGFzc0lucHV0cy5OQkFOID0gY29udGFpbmVyRVhUNDAxLmdldFN0cmluZygiRVhTQkFOIikNCiAgICAgICAgICAgICAgekN1cnJTdGFzID0gY29udGFpbmVyRVhUNDAxLmdldCgiRVhTVEFTIikudG9TdHJpbmcoKQ0KICAgICAgICAgICAgICB6TmV3U1RBUyA9ICIxIg0KICAgICAgICAgICAgICBJTjkxID0gdHJ1ZQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKCFJTjkzICYmIGNvbnRhaW5lckVYVDQwMS5nZXQoIkVYU1RBUyIpID09ICIxIg0KICAgICAgICAgICAgICBhcyBjaGFyKSB7DQogICAgICAgICAgICAgIHpOZXdTVEFTID0gY29udGFpbmVyRVhUNDAxLmdldCgiRVhTVEFTIikNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgIH0NCg0KICAgICAgaWYgKHpOZXdTVEFTID09ICI5Iikgew0KICAgICAgICB6TmV3U1RBUyA9ICIyIg0KICAgICAgfQ0KDQogICAgICBsb2dnZXIuZGVidWcoIklOOTM6ICIgKyBJTjkzICsgIiB8IGFkZFJlY2xhc3NJbnB1dHM6ICIgKyBhZGRSZWNsYXNzSW5wdXRzLk5CQU4gKyAiIHwgYmFzZUJBTk86ICIgKyBiYXNlQkFOTyArICIgfCB6ekN1cnJTdGFzOiAiICsgekN1cnJTdGFzICsgIiB8IHpOZXdTVEFTOiAiICsgek5ld1NUQVMpDQoNCiAgICAgIGlmICgoSU45MyB8fCBhZGRSZWNsYXNzSW5wdXRzLmdldCgiTkJBTiIpID09IGJhc2VCQU5PKSAmJiB6Q3VyclN0YXMgIT0gIjMiICYmIHpOZXdTVEFTICE9ICIzIikgew0KICAgICAgICBhZGRSZWNsYXNzSW5wdXRzLlJTQ0QgPSAiIg0KDQogICAgICAgIERCQWN0aW9uIGFjdGlvblFNU1JRSCA9IGRhdGFiYXNlLnRhYmxlKCJRTVNSUUgiKS5pbmRleCgiMzAiKS5zZWxlY3Rpb24oIlJIQ09OTyIsICJSSElUTk8iLCAiUkhCQU5PIiwgIlJIUVNUQSIsICJSSFFSUlAiLCAiUkhRQVBSIikuYnVpbGQoKQ0KICAgICAgICBEQkNvbnRhaW5lciBjb250YWluZXJRTVNSUUggPSBhY3Rpb25RTVNSUUguZ2V0Q29udGFpbmVyKCkNCg0KICAgICAgICBjb250YWluZXJRTVNSUUguc2V0KCJSSENPTk8iLCBDT05PKQ0KICAgICAgICBjb250YWluZXJRTVNSUUguc2V0KCJSSElUTk8iLCBpSVROT19SY2xQcmV2TG90KQ0KICAgICAgICBjb250YWluZXJRTVNSUUguc2V0KCJSSEJBTk8iLCBhZGRSZWNsYXNzSW5wdXRzLmdldE9yRGVmYXVsdCgiTkJBTiIsICIiKSkNCg0KICAgICAgICBsb2dnZXIuZGVidWcoIlJlYWRpbmcgUU1TUlFIIElOOTM6ICIgKyBjb250YWluZXJRTVNSUUgudG9TdHJpbmcoKSkNCg0KICAgICAgICBMaXN0IDwgREJDb250YWluZXIgPiBhcnJheU9mQ29udGFpbmVycyA9IG5ldyBBcnJheUxpc3QgPCA+ICgpDQoNCiAgICAgICAgQ2xvc3VyZSA8ID8gPiByZWFkQWxsUmVjb3JkUU1TUlFIID0gew0KICAgICAgICAgIERCQ29udGFpbmVyIHJlc3VsdENvbnRhaW5lciAtPg0KICAgICAgICAgIGFycmF5T2ZDb250YWluZXJzLmFkZChyZXN1bHRDb250YWluZXIpDQogICAgICAgIH0NCg0KICAgICAgICBpZiAoYWN0aW9uUU1TUlFILnJlYWRBbGwoY29udGFpbmVyUU1TUlFILCAzLCByZWFkQWxsUmVjb3JkUU1TUlFIKSkgew0KICAgICAgICAgIGludCBhcnJheVNpemUgPSBhcnJheU9mQ29udGFpbmVycy5zaXplKCkNCiAgICAgICAgICBpZiAoYXJyYXlTaXplID49IDEpIHsNCiAgICAgICAgICAgIERCQ29udGFpbmVyIHJlc3VsdENvbnRhaW5lciA9IGFycmF5T2ZDb250YWluZXJzW2FycmF5T2ZDb250YWluZXJzLnNpemUoKSAtIDFdDQoNCiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygiTUlUTE9DX1NUQVM6ICIgKyBNSVRMT0NfU1RBUyArICIgfCBRTVNSUUggcmVjb3JkIGZvdW5kOiAiICsgcmVzdWx0Q29udGFpbmVyLnRvU3RyaW5nKCkpDQoNCiAgICAgICAgICAgIGlmIChyZXN1bHRDb250YWluZXIuZ2V0SW50KCJSSFFTVEEiKSA8IDQgJiYgcmVzdWx0Q29udGFpbmVyLmdldFN0cmluZygiUkhRUlJQIikudHJpbSgpLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgICBpZiAocmVzdWx0Q29udGFpbmVyLmdldEludCgiUkhRQVBSIikgPT0gMiAmJiBNSVRMT0NfU1RBUyA9PSAiMSIpIHsNCiAgICAgICAgICAgICAgICB6Q3VyclN0YXMgPSAiMyINCiAgICAgICAgICAgICAgICB6TmV3U1RBUyA9ICIzIg0KICAgICAgICAgICAgICAgIGFkZFJlY2xhc3NJbnB1dHMuTkJBTiA9IGJhc2VCQU5PDQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICh6TmV3U1RBUyA9PSAiMiIgJiYgcmVzdWx0Q29udGFpbmVyLmdldEludCgiUkhRQVBSIikgPT0gMCAmJiBhZGRSZWNsYXNzSW5wdXRzLk5CQU4gPT0gYmFzZUJBTk8pIHsNCiAgICAgICAgICAgICAgek5ld1NUQVMgPSAiMSINCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgIH0NCg0KICAgICAgREJBY3Rpb24gYWN0aW9uRVhUNDAxID0gZGF0YWJhc2UudGFibGUoIkVYVDQwMSIpLmluZGV4KCIyMCIpLnNlbGVjdEFsbEZpZWxkcygpLmJ1aWxkKCkNCg0KICAgICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhDT05PIiwgQ09OTykNCiAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYTFdITCIsIG9yaWdXSExPKQ0KICAgICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhJVE5PIiwgaUlUTk8pDQogICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWFNCQU4iLCBvcmlnQkFOTykNCiAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYQ0FNVSIsIG9yaWdDQU1VKQ0KICAgICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhMV0hTIiwgb3JpZ1dIU0wpDQoNCiAgICAgIExpc3QgPCBMb2NrZWRSZXN1bHQgPiBsb2NrZWRSZXN1bHRzTGlzdCA9IG5ldyBBcnJheUxpc3QgPCBMb2NrZWRSZXN1bHQgPiAoKQ0KDQogICAgICBDbG9zdXJlIDwgPyA+IHJlYWRBbGxSZWNvcmRFWFQ0MDEgPSB7DQogICAgICAgIExvY2tlZFJlc3VsdCBsb2NrZWRSZXN1bHQgLT4NCiAgICAgICAgbG9ja2VkUmVzdWx0c0xpc3QuYWRkKGxvY2tlZFJlc3VsdCkNCiAgICAgIH0NCg0KICAgICAgYWN0aW9uRVhUNDAxLnJlYWRBbGxMb2NrKGNvbnRhaW5lckVYVDQwMSwgNiwgcmVhZEFsbFJlY29yZEVYVDQwMSkNCg0KICAgICAgaWYgKGxvY2tlZFJlc3VsdHNMaXN0LnNpemUoKSA+IDApIHsNCiAgICAgICAgTG9ja2VkUmVzdWx0IGxvY2tlZFJlc3VsdCA9IGxvY2tlZFJlc3VsdHNMaXN0WzBdDQogICAgICAgIGlmIChpUk1WQ19SY2xQcmV2TG90LnRyaW0oKSA9PSAiMSIpIHsNCiAgICAgICAgICBsb2NrZWRSZXN1bHQuc2V0KCJFWFNUQVMiLCAiOSINCiAgICAgICAgICAgIGFzIGNoYXIpDQogICAgICAgIH0NCiAgICAgICAgaWYgKCFpUlNDRF9SY2xQcmV2TG90LnRyaW0oKS5pc0VtcHR5KCkpIHsNCiAgICAgICAgICBsb2NrZWRSZXN1bHQuc2V0KCJFWFJTQ0QiLCBpUlNDRF9SY2xQcmV2TG90KQ0KICAgICAgICB9DQogICAgICAgIGxvY2tlZFJlc3VsdC5zZXQoIkVYTFNUUSIsIGNvbnRhaW5lck1JVExPQy5nZXQoIk1MU1RRVCIpKQ0KICAgICAgICBsb2NrZWRSZXN1bHQuc2V0KCJFWExNRFQiLCB1dGlsaXR5LmNhbGwoIkRhdGVVdGlsIiwgImN1cnJlbnREYXRlWThBc0ludCIpKQ0KICAgICAgICBsb2NrZWRSZXN1bHQuc2V0KCJFWENISUQiLCBwcm9ncmFtLmdldFVzZXIoKSkNCiAgICAgICAgbG9ja2VkUmVzdWx0LnNldCgiRVhDSE5PIiwgbG9ja2VkUmVzdWx0LmdldEludCgiRVhDSE5PIikgKyAxKQ0KICAgICAgICBsb2NrZWRSZXN1bHQudXBkYXRlKCkNCiAgICAgIH0NCg0KICAgICAgbG9nZ2VyLmRlYnVnKCJJTjkzOiAiICsgSU45MyArICIgfCBhZGRSZWNsYXNzSW5wdXRzOiAiICsgYWRkUmVjbGFzc0lucHV0cy5OQkFOICsgIiB8IGJhc2VCQU5POiAiICsgYmFzZUJBTk8gKyAiIHwgenpDdXJyU3RhczogIiArIHpDdXJyU3RhcyArICIgfCB6TmV3U1RBUzogIiArIHpOZXdTVEFTKQ0KDQogICAgICBpZiAoeHhDaGdTdHMpIHsNCiAgICAgICAgYWRkUmVjbGFzc0lucHV0cy5TVEFTID0gek5ld1NUQVMNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIGFkZFJlY2xhc3NJbnB1dHMuU1RBUyA9ICIxIg0KICAgICAgfQ0KDQogICAgICBhZGRSZWNsYXNzSW5wdXRzLkFMT0MgPSAiMSINCg0KICAgICAgQ2xvc3VyZSA8ID8gPiBhZGRSZWNsYXNzQ2FsbGJhY2sgPSB7DQogICAgICAgIE1hcCA8IFN0cmluZywNCiAgICAgICAgU3RyaW5nID4gcmVzcG9uc2UgLT4NCiAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7DQogICAgICAgICAgbG9nZ2VyLmRlYnVnKCJNSSBFcnJvciBhZGRSZWNsYXNzQ2FsbGJhY2siKQ0KICAgICAgICAgIG1pLmVycm9yKHJlc3BvbnNlLmVycm9yTWVzc2FnZS50b1N0cmluZygpKQ0KICAgICAgICAgIHJldHVybg0KICAgICAgICB9DQoNCiAgICAgICAgY29udGFpbmVyTUlUTE9DLnNldCgiTUxXSExPIiwgYWRkUmVjbGFzc0lucHV0cy5XSExPKQ0KICAgICAgICBjb250YWluZXJNSVRMT0Muc2V0KCJNTElUTk8iLCBhZGRSZWNsYXNzSW5wdXRzLklUTk8pDQogICAgICAgIGNvbnRhaW5lck1JVExPQy5zZXQoIk1MV0hTTCIsIGFkZFJlY2xhc3NJbnB1dHMuV0hTTCkNCiAgICAgICAgY29udGFpbmVyTUlUTE9DLnNldCgiTUxCQU5PIiwgYWRkUmVjbGFzc0lucHV0cy5OQkFOKQ0KICAgICAgICBjb250YWluZXJNSVRMT0Muc2V0KCJNTENBTVUiLCBhZGRSZWNsYXNzSW5wdXRzLkNBTVUpDQoNCiAgICAgICAgbG9nZ2VyLmRlYnVnKCJSY2xQcmV2TG90IEZpbmFsIikNCiAgICAgICAgbG9nZ2VyLmRlYnVnKCJvcmlnQkFOTzogIiArIG9yaWdCQU5PICsgIiB8IHpOZXdTdGFzOiAiICsgek5ld1NUQVMgKyAiIHwgekN1cnJTdGFzOiAiICsgekN1cnJTdGFzICsgIiB8IHNraXBUb0Jhc2U6ICIgKyBza2lwVG9CYXNlKQ0KICAgICAgICBsb2dnZXIuZGVidWcoImNvbnRhaW5lck1JVExPQzogIiArIGNvbnRhaW5lck1JVExPQy50b1N0cmluZygpKQ0KICAgICAgfQ0KDQogICAgICBtaUNhbGxlci5jYWxsKCJNTVM4NTBNSSIsICJBZGRSZWNsYXNzIiwgYWRkUmVjbGFzc0lucHV0cywgYWRkUmVjbGFzc0NhbGxiYWNrKQ0KDQogICAgfSBlbHNlIHsNCg0KICAgICAgaWYgKGlSTVZDX1JjbFByZXZMb3QgPT0gIjEiKSB7DQogICAgICAgIERCQWN0aW9uIGFjdGlvbkVYVDQwMSA9IGRhdGFiYXNlLnRhYmxlKCJFWFQ0MDEiKS5pbmRleCgiMDAiKS5zZWxlY3RBbGxGaWVsZHMoKS5idWlsZCgpDQogICAgICAgIGNvbnRhaW5lckVYVDQwMSA9IGFjdGlvbkVYVDQwMS5nZXRDb250YWluZXIoKQ0KDQogICAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYQ09OTyIsIENPTk8pDQogICAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYSVROTyIsIGlJVE5PX1JjbFByZXZMb3QpDQogICAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYU0JBTiIsIG9yaWdCQU5PKQ0KICAgICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWENBTVUiLCBvcmlnQ0FNVSkNCiAgICAgICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhMV0hMIiwgb3JpZ1dITE8pDQogICAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYTFdIUyIsIG9yaWdXSFNMKQ0KDQogICAgICAgIENsb3N1cmUgPCA/ID4gcmVhZEFsbFJlY29yZEVYVDQwMSA9IHsNCiAgICAgICAgICBMb2NrZWRSZXN1bHQgbG9ja2VkUmVzdWx0IC0+DQogICAgICAgICAgbG9ja2VkUmVzdWx0LnNldCgiRVhTVEFTIiwgIjkiKQ0KICAgICAgICAgIGxvY2tlZFJlc3VsdC5zZXQoIkVYTE1EVCIsIHV0aWxpdHkuY2FsbCgiRGF0ZVV0aWwiLCAiY3VycmVudERhdGVZOEFzSW50IikpDQogICAgICAgICAgbG9ja2VkUmVzdWx0LnNldCgiRVhDSElEIiwgcHJvZ3JhbS5nZXRVc2VyKCkpDQogICAgICAgICAgbG9ja2VkUmVzdWx0LnNldCgiRVhDSE5PIiwgbG9ja2VkUmVzdWx0LmdldEludCgiRVhDSE5PIikgKyAxKQ0KICAgICAgICAgIGxvY2tlZFJlc3VsdC51cGRhdGUoKQ0KDQogICAgICAgICAgbG9nZ2VyLmRlYnVnKCJFbHNlIGNvbmRpdGlvbi4gUmVjb3JkIHVwZGF0ZWQiICsgY29udGFpbmVyRVhUNDAxLnRvU3RyaW5nKCkpDQogICAgICAgIH0NCg0KICAgICAgICBpZiAoIWFjdGlvbkVYVDQwMS5yZWFkQWxsTG9jayhjb250YWluZXJFWFQ0MDEsIDYsIHJlYWRBbGxSZWNvcmRFWFQ0MDEpKSB7DQogICAgICAgICAgbG9nZ2VyLmRlYnVnKCJFbHNlIGNvbmRpdGlvbi4gUmVjb3JkIGRvZXMgbm90IGV4aXN0IiArIGNvbnRhaW5lckVYVDQwMS50b1N0cmluZygpKQ0KICAgICAgICAgIG1pLmVycm9yKCJSZWNvcmQgZG9lcyBub3QgZXhpc3QiKQ0KICAgICAgICAgIHJldHVybg0KICAgICAgICB9DQogICAgICB9DQoNCiAgICB9DQoNCiAgfQ0KDQogIHByaXZhdGUgdm9pZCByZWplY3RBZmZlY3RBbGxMZXZlbHMoaW50IENPTk8sIFN0cmluZyBvcmlnV0hMTywgU3RyaW5nIG9yaWdCQU5PLCBTdHJpbmcgb3JpZ0NBTVUsIFN0cmluZyBvcmlnV0hTTCwgU3RyaW5nIEVYVDQwMV9TQkFOLCBTdHJpbmcgRVhUNDAxX0JBTk8pIHsNCiAgICBTdHJpbmcgeHhUWFZSID0gIiAiICogMTANCiAgICBTdHJpbmcgeHhUWDYwID0gIiAiICogNjANCg0KICAgIGxvZ2dlci5kZWJ1ZygiVXB3YXJkcyBpbiB0aGUgSGllcmFyY2h5IikNCiAgICAvLyBDaGFuZ2UgYWxsIFN1Yi1MZXZlbHMgKFVwd2FyZHMgaW4gdGhlIEhpZXJhcmNoeSEpICYgQWRkIFRleHQgdG8gU3ViLUxvdA0KICAgIERCQWN0aW9uIGFjdGlvbkVYVDQwMSA9IGRhdGFiYXNlLnRhYmxlKCJFWFQ0MDEiKS5pbmRleCgiMjAiKS5zZWxlY3RBbGxGaWVsZHMoKS5idWlsZCgpDQoNCiAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWENPTk8iLCBDT05PKQ0KICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYTFdITCIsIG9yaWdXSExPKQ0KICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYU0JBTiIsIG9yaWdCQU5PKQ0KICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYQ0FNVSIsIG9yaWdDQU1VKQ0KICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYTFdIUyIsIG9yaWdXSFNMKQ0KDQogICAgQ2xvc3VyZSA8ID8gPiByZWFkQWxsUmVjb3JkRVhUNDAxID0gew0KICAgICAgREJDb250YWluZXIgcmVzdWx0Q29udGFpbmVyIC0+DQogICAgICBjb250YWluZXJFWFQ0MDEgPSByZXN1bHRDb250YWluZXINCiAgICB9DQoNCiAgICBpZiAoYWN0aW9uRVhUNDAxLnJlYWRBbGwoY29udGFpbmVyRVhUNDAxLCA2LCAxLCByZWFkQWxsUmVjb3JkRVhUNDAxKSkgew0KDQogICAgICB4eFRYVlIgPSAiRElTUCINCiAgICAgIHh4VFg2MCA9ICJSZWogU3ViLUxvdDogIiArIG9yaWdCQU5PLnJlcGxhY2VBbGwoLyAqJC8sICcnKSArICIgQzogIiArIG9yaWdDQU1VLnJlcGxhY2VBbGwoLyAqJC8sICcnKQ0KICAgICAgYWRkRnJlZVRleHQoeHhUWFZSLCB4eFRYNjAsIGNvbnRhaW5lckVYVDQwMS5nZXRTdHJpbmcoIkVYU0JBTiIpKQ0KDQogICAgICB4eFRYVlIgPSAiRElTUCINCiAgICAgIHh4VFg2MCA9ICJSZWogRnJvbSBMOiAiICsgbXlMdmxfQkFOTy5yZXBsYWNlQWxsKC8gKiQvLCAnJykgKyAiIEM6ICIgKyBvcmlnQ0FNVS5yZXBsYWNlQWxsKC8gKiQvLCAnJykNCiAgICAgIGFkZEZyZWVUZXh0KHh4VFhWUiwgeHhUWDYwLCBjb250YWluZXJFWFQ0MDEuZ2V0U3RyaW5nKCJFWFNCQU4iKSkNCg0KICAgICAgYWN0aW9uRVhUNDAxID0gZGF0YWJhc2UudGFibGUoIkVYVDQwMSIpLmluZGV4KCIxMCIpLnNlbGVjdEFsbEZpZWxkcygpLmJ1aWxkKCkNCg0KICAgICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhDT05PIiwgQ09OTykNCiAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYSVROTyIsIGNvbnRhaW5lckVYVDQwMS5nZXRTdHJpbmcoIkVYSVROTyIpKQ0KICAgICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhMV0hMIiwgY29udGFpbmVyRVhUNDAxLmdldFN0cmluZygiRVhMV0hMIikpDQogICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWFBCQU4iLCBjb250YWluZXJFWFQ0MDEuZ2V0U3RyaW5nKCJFWFNCQU4iKSkNCiAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYQ0FNVSIsIGNvbnRhaW5lckVYVDQwMS5nZXRTdHJpbmcoIkVYQ0FNVSIpKQ0KICAgICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhMV0hTIiwgY29udGFpbmVyRVhUNDAxLmdldFN0cmluZygiRVhMV0hTIikpDQoNCiAgICAgIENsb3N1cmUgPCA/ID4gdXBkYXRlRVhUNDAxID0gew0KICAgICAgICBMb2NrZWRSZXN1bHQgbG9ja2VkUmVzdWx0IC0+DQoNCiAgICAgICAgbG9ja2VkUmVzdWx0LmFsbENvbHVtbnMuZWFjaCB7DQogICAgICAgICAgU3RyaW5nIGNvbHVtbiAtPg0KICAgICAgICAgICAgY29udGFpbmVyRVhUNDAxLnNldChjb2x1bW4sIGxvY2tlZFJlc3VsdC5nZXQoY29sdW1uKSkNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChsb2NrZWRSZXN1bHQuZ2V0KCJFWFNUQVMiKS50b1N0cmluZygpID09ICIxIikgew0KICAgICAgICAgIGxvY2tlZFJlc3VsdC5zZXQoIkVYU1RBUyIsICIzIikNCiAgICAgICAgICBsb2NrZWRSZXN1bHQuc2V0KCJFWExNRFQiLCB1dGlsaXR5LmNhbGwoIkRhdGVVdGlsIiwgImN1cnJlbnREYXRlWThBc0ludCIpKQ0KICAgICAgICAgIGxvY2tlZFJlc3VsdC5zZXQoIkVYQ0hJRCIsIHByb2dyYW0uZ2V0VXNlcigpKQ0KICAgICAgICAgIGxvY2tlZFJlc3VsdC5zZXQoIkVYQ0hOTyIsIGxvY2tlZFJlc3VsdC5nZXRJbnQoIkVYQ0hOTyIpICsgMSkNCiAgICAgICAgICBsb2NrZWRSZXN1bHQudXBkYXRlKCkNCiAgICAgICAgfQ0KDQogICAgICAgIHh4VFhWUiA9ICJESVNQIg0KICAgICAgICB4eFRYNjAgPSAiUmVqIFN1Yi1Mb3Q6ICIgKyBvcmlnQkFOTy5yZXBsYWNlQWxsKC8gKiQvLCAnJykgKyAiIEM6ICIgKyBvcmlnQ0FNVS5yZXBsYWNlQWxsKC8gKiQvLCAnJykNCiAgICAgICAgYWRkRnJlZVRleHQoeHhUWFZSLCB4eFRYNjAsIGNvbnRhaW5lckVYVDQwMS5nZXRTdHJpbmcoIkVYU0JBTiIpKQ0KDQogICAgICAgIHh4VFhWUiA9ICJESVNQIg0KICAgICAgICB4eFRYNjAgPSAiUmVqIEZyb20gTDogIiArIG15THZsX0JBTk8ucmVwbGFjZUFsbCgvICokLywgJycpICsgIiBDOiAiICsgb3JpZ0NBTVUucmVwbGFjZUFsbCgvICokLywgJycpDQogICAgICAgIGFkZEZyZWVUZXh0KHh4VFhWUiwgeHhUWDYwLCBjb250YWluZXJFWFQ0MDEuZ2V0U3RyaW5nKCJFWFNCQU4iKSkNCg0KICAgICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWENPTk8iLCBDT05PKQ0KICAgICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWExXSEwiLCBjb250YWluZXJFWFQ0MDEuZ2V0U3RyaW5nKCJFWExXSEwiKSkNCiAgICAgICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhQQkFOIiwgY29udGFpbmVyRVhUNDAxLmdldFN0cmluZygiRVhTQkFOIikpDQogICAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYQ0FNVSIsIGNvbnRhaW5lckVYVDQwMS5nZXRTdHJpbmcoIkVYQ0FNVSIpKQ0KICAgICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWExXSFMiLCBjb250YWluZXJFWFQ0MDEuZ2V0U3RyaW5nKCJFWExXSFMiKSkNCiAgICAgIH0NCg0KICAgICAgd2hpbGUgKGFjdGlvbkVYVDQwMS5yZWFkQWxsTG9jayhjb250YWluZXJFWFQ0MDEsIDYsIHVwZGF0ZUVYVDQwMSkpIHsNCiAgICAgICAgLy8NCiAgICAgIH0NCg0KICAgIH0NCg0KICAgIGxvZ2dlci5kZWJ1ZygiRG93bndhcmRzIGluIHRoZSBIaWVyYXJjaHkiKQ0KICAgIC8vIENoYW5nZSBhbGwgUHJlLUxldmVscyAoRG93bndhcmRzIGluIHRoZSBIaWVyYXJjaHkhKSAmIEFkZCBUZXh0IHRvIFN1Yi1Mb3QNCiAgICBhY3Rpb25FWFQ0MDEgPSBkYXRhYmFzZS50YWJsZSgiRVhUNDAxIikuaW5kZXgoIjIwIikuc2VsZWN0QWxsRmllbGRzKCkuYnVpbGQoKQ0KDQogICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhDT05PIiwgQ09OTykNCiAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWExXSEwiLCBvcmlnV0hMTykNCiAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWFNCQU4iLCBvcmlnQkFOTykNCiAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWENBTVUiLCBvcmlnQ0FNVSkNCiAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWExXSFMiLCBvcmlnV0hTTCkNCg0KICAgIGlmIChhY3Rpb25FWFQ0MDEucmVhZEFsbChjb250YWluZXJFWFQ0MDEsIDYsIDEsIHJlYWRBbGxSZWNvcmRFWFQ0MDEpKSB7DQoNCiAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYQ09OTyIsIENPTk8pDQogICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWExXSEwiLCBjb250YWluZXJFWFQ0MDEuZ2V0U3RyaW5nKCJFWExXSEwiKSkNCiAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYU0JBTiIsIGNvbnRhaW5lckVYVDQwMS5nZXRTdHJpbmcoIkVYUEJBTiIpKQ0KICAgICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhDQU1VIiwgY29udGFpbmVyRVhUNDAxLmdldFN0cmluZygiRVhDQU1VIikpDQogICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWExXSFMiLCBjb250YWluZXJFWFQ0MDEuZ2V0U3RyaW5nKCJFWExXSFMiKSkNCg0KICAgICAgQ2xvc3VyZSA8ID8gPiB1cGRhdGVFWFQ0MDEgPSB7DQogICAgICAgIExvY2tlZFJlc3VsdCBsb2NrZWRSZXN1bHQgLT4NCg0KICAgICAgICBsb2NrZWRSZXN1bHQuYWxsQ29sdW1ucy5lYWNoIHsNCiAgICAgICAgICBTdHJpbmcgY29sdW1uIC0+DQogICAgICAgICAgICBjb250YWluZXJFWFQ0MDEuc2V0KGNvbHVtbiwgbG9ja2VkUmVzdWx0LmdldChjb2x1bW4pKQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGxvY2tlZFJlc3VsdC5nZXQoIkVYU1RBUyIpLnRvU3RyaW5nKCkgPT0gIjEiKSB7DQogICAgICAgICAgbG9ja2VkUmVzdWx0LnNldCgiRVhTVEFTIiwgIjMiKQ0KICAgICAgICAgIGxvY2tlZFJlc3VsdC5zZXQoIkVYTE1EVCIsIHV0aWxpdHkuY2FsbCgiRGF0ZVV0aWwiLCAiY3VycmVudERhdGVZOEFzSW50IikpDQogICAgICAgICAgbG9ja2VkUmVzdWx0LnNldCgiRVhDSElEIiwgcHJvZ3JhbS5nZXRVc2VyKCkpDQogICAgICAgICAgbG9ja2VkUmVzdWx0LnNldCgiRVhDSE5PIiwgbG9ja2VkUmVzdWx0LmdldEludCgiRVhDSE5PIikgKyAxKQ0KICAgICAgICAgIGxvY2tlZFJlc3VsdC51cGRhdGUoKQ0KICAgICAgICB9DQoNCiAgICAgICAgeHhUWFZSID0gIkRJU1AiDQogICAgICAgIHh4VFg2MCA9ICJSZWogU3ViLUxvdDogIiArIG9yaWdCQU5PLnJlcGxhY2VBbGwoLyAqJC8sICcnKSArICIgQzogIiArIG9yaWdDQU1VLnJlcGxhY2VBbGwoLyAqJC8sICcnKQ0KICAgICAgICBhZGRGcmVlVGV4dCh4eFRYVlIsIHh4VFg2MCwgY29udGFpbmVyRVhUNDAxLmdldFN0cmluZygiRVhTQkFOIikpDQoNCiAgICAgICAgeHhUWFZSID0gIkRJU1AiDQogICAgICAgIHh4VFg2MCA9ICJSZWogRnJvbSBMOiAiICsgbXlMdmxfQkFOTy5yZXBsYWNlQWxsKC8gKiQvLCAnJykgKyAiIEM6ICIgKyBvcmlnQ0FNVS5yZXBsYWNlQWxsKC8gKiQvLCAnJykNCiAgICAgICAgYWRkRnJlZVRleHQoeHhUWFZSLCB4eFRYNjAsIGNvbnRhaW5lckVYVDQwMS5nZXRTdHJpbmcoIkVYU0JBTiIpKQ0KDQogICAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYQ09OTyIsIENPTk8pDQogICAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYTFdITCIsIGNvbnRhaW5lckVYVDQwMS5nZXRTdHJpbmcoIkVYTFdITCIpKQ0KICAgICAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWFNCQU4iLCBjb250YWluZXJFWFQ0MDEuZ2V0U3RyaW5nKCJFWFBCQU4iKSkNCiAgICAgICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhDQU1VIiwgY29udGFpbmVyRVhUNDAxLmdldFN0cmluZygiRVhDQU1VIikpDQogICAgICAgIGNvbnRhaW5lckVYVDQwMS5zZXQoIkVYTFdIUyIsIGNvbnRhaW5lckVYVDQwMS5nZXRTdHJpbmcoIkVYTFdIUyIpKQ0KICAgICAgfQ0KDQogICAgICB3aGlsZSAoYWN0aW9uRVhUNDAxLnJlYWRBbGxMb2NrKGNvbnRhaW5lckVYVDQwMSwgNiwgdXBkYXRlRVhUNDAxKSkgew0KICAgICAgICAvLw0KICAgICAgfQ0KDQogICAgfQ0KDQogICAgbG9nZ2VyLmRlYnVnKCJCQVNFIExvdCIpDQogICAgLy8gQWRkIFRleHQgdG8gQkFTRSBMb3QNCiAgICBhY3Rpb25FWFQ0MDEgPSBkYXRhYmFzZS50YWJsZSgiRVhUNDAxIikuaW5kZXgoIjIwIikuc2VsZWN0QWxsRmllbGRzKCkuYnVpbGQoKQ0KDQogICAgY29udGFpbmVyRVhUNDAxLnNldCgiRVhDT05PIiwgQ09OTykNCiAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWExXSEwiLCBvcmlnV0hMTykNCiAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWFNCQU4iLCBvcmlnQkFOTykNCiAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWENBTVUiLCBvcmlnQ0FNVSkNCiAgICBjb250YWluZXJFWFQ0MDEuc2V0KCJFWExXSFMiLCBvcmlnV0hTTCkNCg0KICAgIGlmIChhY3Rpb25FWFQ0MDEucmVhZEFsbChjb250YWluZXJFWFQ0MDEsIDYsIDEsIHJlYWRBbGxSZWNvcmRFWFQ0MDEpKSB7DQogICAgICB4eFRYVlIgPSAiRElTUCINCiAgICAgIHh4VFg2MCA9ICJSZWogU3ViLUxvdDogIiArIG9yaWdCQU5PLnJlcGxhY2VBbGwoLyAqJC8sICcnKSArICIgQzogIiArIG9yaWdDQU1VLnJlcGxhY2VBbGwoLyAqJC8sICcnKQ0KICAgICAgYWRkRnJlZVRleHQoeHhUWFZSLCB4eFRYNjAsIGNvbnRhaW5lckVYVDQwMS5nZXRTdHJpbmcoIkVYQkFOTyIpKQ0KDQogICAgICB4eFRYVlIgPSAiRElTUCINCiAgICAgIHh4VFg2MCA9ICJSZWogRnJvbSBMOiAiICsgbXlMdmxfQkFOTy5yZXBsYWNlQWxsKC8gKiQvLCAnJykgKyAiIEM6ICIgKyBvcmlnQ0FNVS5yZXBsYWNlQWxsKC8gKiQvLCAnJykNCiAgICAgIGFkZEZyZWVUZXh0KHh4VFhWUiwgeHhUWDYwLCBjb250YWluZXJFWFQ0MDEuZ2V0U3RyaW5nKCJFWEJBTk8iKSkNCiAgICB9DQoNCiAgfQ0KDQogIHByaXZhdGUgdm9pZCBhZGRGcmVlVGV4dChTdHJpbmcgVFhWUiwgU3RyaW5nIFRYNjAsIFN0cmluZyBMb3ROdW1iZXIpIHsNCiAgICBNYXAgPCBTdHJpbmcsIFN0cmluZyA+IGFkZEZyZWVUZXh0SW5wdXRzID0gWw0KICAgICAgIklUTk8iOiBpSVROTywNCiAgICAgICJCQU5PIjogTG90TnVtYmVyLA0KICAgICAgIlRYVlIiOiBUWFZSLA0KICAgICAgIlRYNjAiOiBUWDYwDQogICAgXQ0KDQogICAgQ2xvc3VyZSA8ID8gPiBhZGRGcmVlVGV4dENhbGxiYWNrID0gew0KICAgICAgTWFwIDwgU3RyaW5nLA0KICAgICAgU3RyaW5nID4gcmVzcG9uc2UgLT4NCiAgICAgIGlmIChyZXNwb25zZS5lcnJvcikgew0KICAgICAgICBtaS5lcnJvcihyZXNwb25zZS5lcnJvck1lc3NhZ2UudG9TdHJpbmcoKSkNCiAgICAgICAgcmV0dXJuDQogICAgICB9DQogICAgfQ0KDQogICAgbWlDYWxsZXIuY2FsbCgiTU1TMjM1TUkiLCAiQWRkRnJlZVRleHQiLCBhZGRGcmVlVGV4dElucHV0cywgYWRkRnJlZVRleHRDYWxsYmFjaykNCg0KICB9DQp9"}}}