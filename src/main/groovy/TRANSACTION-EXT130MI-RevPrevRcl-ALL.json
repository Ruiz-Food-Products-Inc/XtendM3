{"programModules":{"EXT130MI":{"program":"EXT130MI","triggers":{},"transactions":{"RevPrevRcl":{"sourceUuid":"30bae7c9-adfd-4ea6-b4d3-937d69bfe697","name":"RevPrevRcl","program":"EXT130MI","description":"Revert back from incorrectly re-classified balance(s)","active":true,"multi":false,"modified":1697877425859,"modifiedBy":"900107","outputFields":[{"name":"SBAN","description":"Sub Lot Number","length":20,"mandatory":false,"type":"A"}],"inputFields":[{"name":"BANO","description":"Lot Number","length":20,"mandatory":true,"type":"A"},{"name":"CAMU","description":"Container","length":20,"mandatory":true,"type":"A"},{"name":"CONO","description":"Company","length":3,"mandatory":false,"type":"N"},{"name":"E065","description":"Message Type","length":6,"mandatory":true,"type":"A"},{"name":"E0PA","description":"Partner","length":17,"mandatory":true,"type":"A"},{"name":"ITNO","description":"Item Number","length":15,"mandatory":true,"type":"A"},{"name":"WHLO","description":"Warehouse","length":3,"mandatory":true,"type":"A"},{"name":"WHSL","description":"Location","length":10,"mandatory":true,"type":"A"}],"utilities":["DateUtil"],"market":"ALL"}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"30bae7c9-adfd-4ea6-b4d3-937d69bfe697":{"uuid":"30bae7c9-adfd-4ea6-b4d3-937d69bfe697","updated":1697563093483,"updatedBy":"900107","created":1697877400354,"createdBy":"900107","apiVersion":"UNKNOWN","beVersion":"16.0.0.20230822184312.7","language":"GROOVY","codeHash":"060E3DD7C0E7C89BF24F4A1CF945985AD4401700CFD63CC3C4930859A5747DE1","code":""}}}