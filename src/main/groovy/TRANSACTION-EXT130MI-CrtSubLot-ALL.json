{"programModules":{"EXT130MI":{"program":"EXT130MI","triggers":{},"transactions":{"CrtSubLot":{"sourceUuid":"8c0667fc-ed5e-44b4-a3cc-ae87fd45eae6","name":"CrtSubLot","program":"EXT130MI","description":"Create Sub Lot","active":true,"multi":false,"modified":1676896175331,"modifiedBy":"900071","outputFields":[{"name":"SBAN","description":"SubLotNumber","length":20,"mandatory":false,"type":"A"}],"inputFields":[{"name":"CONO","description":"Company","length":3,"mandatory":false,"type":"N"},{"name":"ITNO","description":"Item Number","length":15,"mandatory":true,"type":"A"},{"name":"BANO","description":"Lot Number","length":20,"mandatory":true,"type":"A"}],"utilities":["DateUtil"],"market":"ALL"}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"8c0667fc-ed5e-44b4-a3cc-ae87fd45eae6":{"uuid":"8c0667fc-ed5e-44b4-a3cc-ae87fd45eae6","updated":1676757968658,"updatedBy":"900107","created":1676896170580,"createdBy":"900071","apiVersion":"UNKNOWN","beVersion":"16.0.0.20221210044646.7","language":"GROOVY","codeHash":"CD40A150C6AF6E60328ECFE617B593916CC98953AB55AD3053AF92C67F8CCFBD","code":""}}}