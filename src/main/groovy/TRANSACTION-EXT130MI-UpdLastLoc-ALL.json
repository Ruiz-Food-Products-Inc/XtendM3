{"programModules":{"EXT130MI":{"program":"EXT130MI","triggers":{},"transactions":{"UpdLastLoc":{"sourceUuid":"c3170a88-11de-4be8-9854-5972e67f9dc5","name":"UpdLastLoc","program":"EXT130MI","description":"Update Last Location used for Balance","active":true,"multi":false,"modified":1697877439868,"modifiedBy":"900107","outputFields":[{"name":"LWHL","description":"Warehouse","length":3,"mandatory":false,"type":"A"},{"name":"LWHS","description":"Location","length":10,"mandatory":false,"type":"A"},{"name":"STAS","description":"Status","length":1,"mandatory":false,"type":"A"}],"inputFields":[{"name":"CONO","description":"Company","length":3,"mandatory":true,"type":"N"},{"name":"ITNO","description":"Item Number","length":15,"mandatory":true,"type":"A"},{"name":"SBAN","description":"Sub Lot number","length":20,"mandatory":true,"type":"A"},{"name":"CAMU","description":"Container","length":20,"mandatory":true,"type":"A"},{"name":"LWHL","description":"Last(New) Warehouse","length":3,"mandatory":true,"type":"A"},{"name":"LWHS","description":"Last(New) Location","length":10,"mandatory":true,"type":"A"},{"name":"TTYP","description":"Transaction Type","length":2,"mandatory":false,"type":"N"},{"name":"LMTS","description":"Timestamp","length":18,"mandatory":false,"type":"A"},{"name":"WHLO","description":"warehouse","length":3,"mandatory":true,"type":"A"},{"name":"RGDT","description":"entry date","length":8,"mandatory":true,"type":"A"},{"name":"RGTM","description":"entry time","length":6,"mandatory":true,"type":"A"},{"name":"TMSX","description":"time suffix","length":3,"mandatory":true,"type":"A"}],"utilities":["DateUtil"],"market":"ALL"}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"c3170a88-11de-4be8-9854-5972e67f9dc5":{"uuid":"c3170a88-11de-4be8-9854-5972e67f9dc5","updated":1697563277243,"updatedBy":"900107","created":1697877400354,"createdBy":"900107","apiVersion":"UNKNOWN","beVersion":"16.0.0.20230822184312.7","language":"GROOVY","codeHash":"E17BD2B1BCA5587FE8BA0EFE7D7927E5C99DDB55ED6EBA29D7585EC85CB68D14","code":""}}}