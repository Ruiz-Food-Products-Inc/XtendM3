{"utilities":{},"programModules":{"EXT130MI":{"program":"EXT130MI","triggers":{},"transactions":{"CrtSubLot":{"sourceUuid":"8c0667fc-ed5e-44b4-a3cc-ae87fd45eae6","name":"CrtSubLot","program":"EXT130MI","description":"Create Sub Lot","active":true,"multi":false,"modified":1675197083143,"modifiedBy":"900046","outputFields":[{"name":"SBAN","description":"SubLotNumber","length":20,"mandatory":false,"type":"A"}],"inputFields":[{"name":"CONO","description":"Company","length":3,"mandatory":false,"type":"N"},{"name":"ITNO","description":"Item Number","length":15,"mandatory":true,"type":"A"},{"name":"BANO","description":"Lot Number","length":20,"mandatory":true,"type":"A"}],"utilities":["DateUtil"]}},"batches":{}}},"sources":{"8c0667fc-ed5e-44b4-a3cc-ae87fd45eae6":{"uuid":"8c0667fc-ed5e-44b4-a3cc-ae87fd45eae6","updated":1676152888142,"updatedBy":"900107","created":1673031958794,"createdBy":"900046","apiVersion":"0.9","beVersion":"16.0.0.20221110165806","codeHash":"C5DF840E9B7A0C2E8F93974CE83FEB118CB9E038DB0211B684AF35FB6799F493","code":""}}}