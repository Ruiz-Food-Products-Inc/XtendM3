{"utilities":{},"programModules":{"EXT130MI":{"program":"EXT130MI","triggers":{},"transactions":{"AddQMSText":{"sourceUuid":"8864c38a-0360-4735-bc78-8f002fc37738","name":"AddQMSText","program":"EXT130MI","description":"Add QMS Text","active":true,"multi":false,"modified":1672339893338,"modifiedBy":"900046","outputFields":[],"inputFields":[{"name":"ITNO","description":"Item number","length":15,"mandatory":true,"type":"A"},{"name":"BANO","description":"Lot number","length":20,"mandatory":true,"type":"A"},{"name":"TXVR","description":"Text block","length":10,"mandatory":true,"type":"A"},{"name":"LNTP","description":"Line value type","length":10,"mandatory":false,"type":"A"},{"name":"TVAL","description":"Text value","length":40,"mandatory":true,"type":"A"}],"utilities":[]}},"batches":{}}},"sources":{"8864c38a-0360-4735-bc78-8f002fc37738":{"uuid":"8864c38a-0360-4735-bc78-8f002fc37738","updated":1676151419090,"updatedBy":"900107","created":1672339890139,"createdBy":"900046","apiVersion":"0.9","beVersion":"16.0.0.20221110165806","codeHash":"7B045439A0CCDEEF3F62B812F08D7D7CB3776DC0255D54BDAAD9282696D530A1","code":""}}}