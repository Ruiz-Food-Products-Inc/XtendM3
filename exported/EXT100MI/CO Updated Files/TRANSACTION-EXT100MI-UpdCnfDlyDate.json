{"utilities":{},"programModules":{"EXT100MI":{"program":"EXT100MI","triggers":{},"transactions":{"UpdCnfDlyDate":{"sourceUuid":"823c4298-78cf-4c67-99d3-2c7fab2f087c","name":"UpdCnfDlyDate","program":"EXT100MI","description":"Update Planning date","active":true,"multi":false,"modified":1674864849974,"modifiedBy":"CHESHA","outputFields":[],"inputFields":[{"name":"CONO","description":"Company","length":3,"mandatory":true,"type":"N"},{"name":"ORNO","description":"Order Number","length":10,"mandatory":true,"type":"A"},{"name":"PONR","description":"Order Line Number","length":5,"mandatory":true,"type":"N"},{"name":"PLDT","description":"Planning Date","length":8,"mandatory":false,"type":"N"},{"name":"PLHM","description":"Planning Time","length":4,"mandatory":false,"type":"N"},{"name":"DSDT","description":"Departure Date","length":8,"mandatory":false,"type":"N"},{"name":"DSHM","description":"Departure Time","length":4,"mandatory":false,"type":"N"},{"name":"CODT","description":"Confirmed Delivery Date","length":8,"mandatory":false,"type":"N"},{"name":"COHM","description":"Confirmed Delivery Time","length":4,"mandatory":false,"type":"N"}],"utilities":["DateUtil"]}},"batches":{}}},"sources":{"823c4298-78cf-4c67-99d3-2c7fab2f087c":{"uuid":"823c4298-78cf-4c67-99d3-2c7fab2f087c","updated":1676222892456,"updatedBy":"900049","created":1666702772984,"createdBy":"900066","apiVersion":"0.9","beVersion":"16.0.0.20221110165806","codeHash":"24A82EAF6FD578C25541BF22A7B8D4DB95FECB845AF2CD51789420E6D6683330","code":""}}}